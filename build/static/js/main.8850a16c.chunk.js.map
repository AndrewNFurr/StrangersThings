{"version":3,"sources":["api/index.js","components/Auth.js","components/Header.js","components/PostForm.js","components/PostView.js","index.js"],"names":["BASE_URL","getToken","localStorage","getItem","setToken","token","setItem","makeHeaders","base","auth","username","password","a","isNew","url","fetch","method","headers","body","JSON","stringify","user","response","json","error","data","Error","message","hitAPI","endpoint","bodyObj","payload","Auth","setIsLoggedIn","isLoggedIn","useState","setUsername","setPassword","errorMessage","setErrorMessage","className","onSubmit","event","preventDefault","type","value","onChange","target","placeholder","onClick","Header","setPostList","setUserPostsOnly","postList","id","removeItem","PostForm","props","addNewPost","_id","setEditablePost","updatePost","title","setTitle","description","setDescription","price","setPrice","location","setLocation","willDeliver","setWillDeliver","isDirty","setIsDirty","useEffect","length","postData","post","result","console","newPost","style","color","rows","columns","checked","MessageForm","handleClick","content","setContent","MessageView","messageList","commentView","setCommentView","map","idx","border","margin","fromUser","PostView","userPostsOnly","isAuthor","posts","log","messages","App","setSearchResults","searchTerm","setSearchTerm","editablePost","filteredPosts","filter","toLowerCase","includes","GetUserMessages","then","catch","htmlFor","updatedPost","index","findIndex","postListCopy","ReactDOM","render","document","getElementById"],"mappings":"2MACMA,EACJ,gEAEWC,EAAW,WACtB,OAAOC,aAAaC,QAAQ,eAOxBC,EAAW,SAACC,GACdH,aAAaI,QAAQ,aAAcD,IAGrC,SAASE,IACP,IAAIC,EAAO,CACT,eAAgB,oBAOlB,OAJIP,MACFO,EAAI,cAAJ,iBAAkCP,MAG7BO,EAGF,IAAMC,EAAI,uCAAG,WAAOC,EAAUC,GAAjB,qCAAAC,EAAA,6DAA2BC,EAA3B,gCACZC,EAAM,UAAGd,EAAH,WAAuBa,EAAQ,YAAc,UADvC,SAGKE,MAAMD,EAAK,CAChCE,OAAQ,OACRC,QAASV,IACTW,KAAMC,KAAKC,UAAU,CACnBC,KAAM,CACJX,SAAUA,EACVC,SAAUA,OATE,cAGZW,EAHY,gBAcYA,EAASC,OAdrB,mBAcVC,EAdU,EAcVA,MAAOC,EAdG,EAcHA,MAEXD,EAhBc,uBAiBVE,MAAMF,EAAMG,SAjBF,eAoBdF,GAAQA,EAAKpB,OACfD,EAASqB,EAAKpB,OArBE,kBAwBXoB,GAxBW,4CAAH,wDA2BJG,EAAM,uCAAG,WAAOZ,EAAQa,EAAUC,GAAzB,uBAAAlB,EAAA,6DACdmB,EAAU,CACdf,OAAQA,EACRC,QAASV,KAGPuB,IACFC,EAAQb,KAAOC,KAAKC,UAAUU,IAPZ,SAUGf,MAAM,GAAD,OAAIf,GAAJ,OAAe6B,GAAYE,GAVnC,cAUdT,EAVc,gBAYUA,EAASC,OAZnB,mBAYZC,EAZY,EAYZA,MAAOC,EAZK,EAYLA,MAEXD,EAdgB,uBAeZE,MAAMF,EAAMG,SAfA,eAkBhBF,GAAQA,EAAKpB,OACfD,EAASqB,EAAKpB,OAnBI,kBAsBboB,GAtBa,4CAAH,0DCCNO,EApDF,SAAC,GAGP,IAFHC,EAEE,EAFFA,cAEE,KADFC,WAG8BC,mBAAS,KAFrC,mBAEGzB,EAFH,KAEa0B,EAFb,OAG4BD,mBAAS,IAHrC,mBAGGxB,EAHH,KAGa0B,EAHb,OAIoCF,mBAAS,MAJ7C,mBAIGG,EAJH,KAIiBC,EAJjB,KAOJ,OACE,uBAAMC,UAAU,aACVC,SAAU,SAACC,GAAD,OAAWA,EAAMC,kBADjC,UAEE,oDACCL,EAAe,oBAAIE,UAAU,QAAd,SAAuBF,IAAqB,KAC5D,uBACEM,KAAK,OACLC,MAAOnC,EACPoC,SAAU,SAACJ,GAAD,OAAWN,EAAYM,EAAMK,OAAOF,QAC9CG,YAAY,aAEd,uBACEJ,KAAK,WACLC,MAAOlC,EACPmC,SAAU,SAACJ,GAAD,OAAWL,EAAYK,EAAMK,OAAOF,QAC9CG,YAAY,aAEd,wBACEC,QAAO,sBAAE,sBAAArC,EAAA,+EAECH,EAAKC,EAAUC,GAAU,GAF1B,OAGLsB,GAAc,GAHT,+CAKLM,EAAgB,KAAMZ,SALjB,wDADX,sBAYA,wBACEsB,QAAO,sBAAE,sBAAArC,EAAA,+EAECH,EAAKC,EAAUC,GAFhB,OAGLsB,GAAc,GAHT,+CAKLM,EAAgB,KAAMZ,SALjB,wDADX,wBCPSuB,EA9BA,SAAC,GAKC,IAJfhB,EAIc,EAJdA,WACAD,EAGc,EAHdA,cACAkB,EAEc,EAFdA,YACAC,EACc,EADdA,iBACAC,EAAc,EAAdA,SACA,OAAO,qBAAKC,GAAG,SAAR,SACJpB,EACC,qCACA,+DACA,wBACEe,QAAS,WFRf/C,aAAaqD,WAAW,cEUlBtB,GAAc,GACdmB,GAAiB,IAJnB,wBAQA,qCACA,mDACA,cAAC,EAAD,CACEnB,cAAeA,EACfoB,SAAUA,EACVF,YAAaA,EACbjB,WAAYA,UCuFLsB,EAjHE,SAACC,GAAW,IAEnBC,EAAiDD,EAAjDC,WAAYC,EAAqCF,EAArCE,IAAKC,EAAgCH,EAAhCG,gBAAiBC,EAAeJ,EAAfI,WAFhB,EAIA1B,mBAAS,IAJT,mBAInB2B,EAJmB,KAIZC,EAJY,OAKY5B,mBAAS,IALrB,mBAKnB6B,EALmB,KAKNC,EALM,OAMA9B,mBAAS,IANT,mBAMnB+B,EANmB,KAMZC,EANY,OAOMhC,mBAAS,IAPf,mBAOnBiC,EAPmB,KAOTC,EAPS,OAQYlC,oBAAS,GARrB,mBAQnBmC,EARmB,KAQNC,EARM,OAUIpC,oBAAS,GAVb,mBAUnBqC,EAVmB,KAUVC,EAVU,KA0B1B,OAPAC,qBAAU,WACRX,EAASN,EAAMK,OAAS,IACxBG,EAAeR,EAAMO,aAAe,IACpCG,EAASV,EAAMS,OAAS,IACxBG,EAAYZ,EAAMW,UAAY,MAC7B,CAACT,IAGF,uBACEnB,UAAU,YACVC,SAAQ,uCAAE,WAAOC,GAAP,mBAAA9B,EAAA,yDACR8B,EAAMC,iBAEe,IAAjBmB,EAAMa,OAHF,uBAINF,GAAW,GAJL,6BAQFG,EAAW,CACfC,KAAM,CACJf,QACAE,cACAE,QACAI,gBAIAF,EAASO,OAAS,IACpBC,EAASC,KAAKT,SAAWA,IAGvBT,EArBI,2CAuBiB/B,EAAO,QAAD,iBAAoB+B,GAAOiB,GAvBlD,QAuBEE,EAvBF,OAwBJjB,EAAWiB,EAAOD,MAClBjB,EAAgB,IAzBZ,kDA2BAmB,QAAQvD,MAAR,MA3BA,2DA+B0BI,EAAO,OAAD,SAAmBgD,GA/BnD,QA+BUI,EA/BV,OAgCItB,EAAWsB,EAAQH,MAhCvB,mDAkCIE,QAAQvD,MAAR,MAlCJ,QAhBZuC,EAAS,IACTE,EAAe,IACfE,EAAS,IACTE,EAAY,IAaA,kEAAF,sDAFV,UA2CE,4CACA,uBACEzB,KAAK,OACLI,YAAY,sBACZH,MAAOiB,EACPhB,SAAU,SAACJ,GAAD,OAAWqB,EAASrB,EAAMK,OAAOF,UAE5C2B,GAA4B,IAAjBV,EAAMa,OAChB,oBAAIM,MAAO,CAAEC,MAAO,OAApB,8BACE,KACJ,0BACEtC,KAAK,OACLI,YAAY,cACZmC,KAAK,KACLC,QAAQ,KACRvC,MAAOmB,EACPlB,SAAU,SAACJ,GAAD,OAAWuB,EAAevB,EAAMK,OAAOF,UAEnD,uBACED,KAAK,OACLI,YAAY,QACZH,MAAOqB,EACPpB,SAAU,SAACJ,GAAD,OAAWyB,EAASzB,EAAMK,OAAOF,UAE7C,uBACED,KAAK,OACLI,YAAY,WACZH,MAAOuB,EACPtB,SAAU,SAACJ,GAAD,OAAW2B,EAAY3B,EAAMK,OAAOF,UAEhD,kCACE,uBACED,KAAK,WACLyC,QAASf,EACTxB,SAAU,kBAAMyB,GAAgBD,MAJpC,yBAQA,8CC7GAgB,EAAc,SAAC,GAEd,IADHC,EACE,EADFA,YACE,EAC4BpD,mBAAS,IADrC,mBACKqD,EADL,KACcC,EADd,KAGF,OAAO,uBAAMhD,SAAU,SAACC,GAAD,OAAWA,EAAMC,kBAAjC,UACc,uBACGC,KAAK,OACLC,MAAO2C,EACP1C,SAAU,SAACJ,GACP+C,EAAW/C,EAAMK,OAAOF,QAE5BG,YAAY,sBAEd,wBAAQC,QAAS,WACbsC,EAAYC,GACZC,EAAW,KAFf,8BAMpBC,EAAc,SAAC,GAEd,IADHC,EACE,EADFA,YACE,EACoCxD,oBAAS,GAD7C,mBACKyD,EADL,KACkBC,EADlB,KAGF,OAAO,qCAAE,wBAAQ5C,QAAS,WACtB4C,GAAgBD,IADX,sBAKTA,EACAD,EAAYG,KAAI,SAACnE,EAASoE,GAC1B,OAAO,sBAAKd,MAAO,CACfe,OAAQ,gBACRC,OAAQ,OAFL,UAIF,uCAAoBtE,EAAQuE,SAASxF,WAA7BqF,GACN,4BAAIpE,EAAQ6D,gBAEd,SAuEMW,EAjEE,SAAC,GAMX,IALH9C,EAKE,EALFA,SACAF,EAIE,EAJFA,YACAS,EAGE,EAHFA,gBACA1B,EAEE,EAFFA,WACAkE,EACE,EADFA,cAEA,OAAQ,sBAAK5D,UAAU,OAAf,UACJ,6BAAK4D,EAAgB,aAAe,cACnC/C,EAASyC,KAAI,SAACjB,GACK,OACA,sBACIrC,UAAU,OAEVyC,MAAO,CACPe,OAAQnB,EAAKwB,SAAW,kBAAoB,oBAJhD,UAOI,+BACCxB,EAAKf,MADN,KACee,EAAKT,SADpB,OAGA,4BAAG,6CAAgBS,EAAKX,WACxB,4BAAIW,EAAKb,cACT,gDAAmBa,EAAKP,YAAc,MAAQ,QAE5CpC,EACI2C,EAAKwB,SACP,sBAAK7D,UAAU,eAAf,UACA,wBAAQS,QAAO,sBAAE,4BAAArC,EAAA,+EAEUgB,EAAO,SAAD,iBAAqBiD,EAAKlB,MAF1C,OAEHlC,EAFG,OAGT0B,EAAY1B,EAAK6E,OAHR,gDAKTvB,QAAQwB,IAAR,MALS,yDAAjB,oBASA,wBAAQtD,QAAS,WACbW,EAAgBiB,IADpB,kBAGA,cAAC,EAAD,CAAac,YAAcd,EAAK2B,cAE9B,qBAAKhE,UAAU,eAAf,SACE,cAAC,EAAD,CACa+C,YAAW,uCAAE,WAAOC,GAAP,eAAA5E,EAAA,sDACJmB,EAAU,CACZJ,QAAS,CACL6D,QAASA,IAGjB,IACI5D,EAAO,OAAD,iBAAmBiD,EAAKlB,IAAxB,aAAwC5B,GAChD,MAAOP,GACLuD,QAAQvD,MAAMA,GATR,2CAAF,0DAalB,OA5CTqD,EAAKlB,YClDpC8C,EAAM,WAAO,IAAD,EAEsBtE,qBAAWlC,KAFjC,mBAEPiC,EAFO,KAEKD,EAFL,OAGkBE,mBAAS,IAH3B,mBAGPkB,EAHO,KAGGF,EAHH,OAI4BhB,mBAAS,IAJrC,mBAIQuE,GAJR,aAKsBvE,mBAAS,IAL/B,mBAKPwE,EALO,KAKKC,EALL,OAM0BzE,mBAAS,IANnC,mBAMP0E,EANO,KAMOjD,EANP,OAO4BzB,oBAAS,GAPrC,mBAOPiE,EAPO,KAOQhD,EAPR,KA0Bd,SAAS0D,IACP,OAAIV,EACK/C,EAAS0D,QAAO,SAAClC,GACtB,OAAOA,EAAKwB,UAAYxB,EAAKf,MAAMkD,cAAcC,SAASN,EAAWK,kBAGhE3D,EAAS0D,QAAO,SAAClC,GACtB,OAAOA,EAAKf,MAAMkD,cAAcC,SAASN,EAAWK,kBAI1D,IAAME,EAAkB,WACpB,OAAO7D,EAASyC,KAAI,SAAAjB,GAChB,OAAOA,EAAKwB,SAAW,sBACZ7D,UAAU,OAEVyC,MAAO,CACJe,OAAQ,mBAJC,UAOZ,uCAAUnB,EAAKf,SAEXe,EAAK2B,SAASV,KAAI,SAACnE,EAASoE,GAC3B,OAAO,sBAAKd,MAAO,CAChBe,OAAQ,gBACRC,OAAQ,OAFJ,UAIH,uCAAoBtE,EAAQuE,SAASxF,WAA7BqF,GACN,4BAAIpE,EAAQ6D,kBAblBX,EAAKlB,KAiBZ,SAcnB,OAVAe,oBAAS,sBAAC,sBAAA9D,EAAA,sDACRgB,EAAO,MAAO,UACXuF,MAAK,SAAC1F,GAAU,IACP6E,EAAU7E,EAAV6E,MACRnD,EAAYmD,MAEbc,MAAMrC,QAAQvD,OANT,2CAOP,CAACU,EAAYmB,IAId,qCACA,cAAC,EAAD,CACEnB,WAAYA,EACZD,cAAeA,EACfkB,YAAaA,EACbE,SAAUyD,IACV1D,iBAAkBA,IACpB,sBAAKE,GAAG,SAAR,UACE,uBAAO+D,QAAQ,WAAf,+BACA,uBACE/D,GAAG,WACHV,KAAK,OACLI,YAAY,mBACZH,MAAQ8D,EACR7D,SAAU,SAACJ,GACTkE,EAAclE,EAAMK,OAAOF,UAE9BX,EACCkE,EACA,wBAAQnD,QAAS,WACfG,GAAkBgD,IADpB,4BAGA,wBAAQnD,QAAS,WACfG,GAAkBgD,IADpB,kCACuE,QAE3E,sBAAK5D,UAAU,iBAAf,UACA,cAAC,EAAD,CAAUkE,iBAAkBA,EACZrD,SAAUyD,IACVlD,gBAAiBA,EACjBT,YAAaA,EACbjB,WAAYA,EACZkE,cAAeA,IAE3B,8BACIA,EAAgB,qCACZ,+CACA,cAACc,EAAD,OAEF,OAELhF,EACD,cAAC,EAAD,yBAAUwB,WAzGd,SAAoBsB,GAChB7B,EAAY,GAAD,mBAAKE,GAAL,CAAe2B,OAyGZ6B,GADd,IAEUjD,gBAAiBA,EACjBC,WAxGd,SAAoByD,GAChB,IAAIC,EAAQlE,EAASmE,WAAU,SAAC3C,GAC5B,OAAOA,EAAKlB,MAAQ2D,EAAY3D,OAEpC,GAAI4D,GAAS,EAAG,CAClB,IAAIE,EAAY,YAAOpE,GACvBoE,EAAaF,GAASD,EACtBnE,EAAYsE,QAiG6B,YAS/CC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.8850a16c.chunk.js","sourcesContent":["\nconst BASE_URL =\n  \"https://strangers-things.herokuapp.com/api/2007-LSU-RM-WEB-PT\";\n\nexport const getToken = () => {\n  return localStorage.getItem(\"auth-token\");\n};\n\nexport const clearToken = () => {\n  localStorage.removeItem(\"auth-token\");\n};\n\nconst setToken = (token) => {\n    localStorage.setItem(\"auth-token\", token);\n  };\n\n  function makeHeaders() {\n    let base = {\n      \"Content-Type\": \"application/json\",\n    };\n  \n    if (getToken()) {\n      base[\"Authorization\"] = `Bearer ${getToken()}`;\n    }\n  \n    return base;\n  }\n \n  export const auth = async (username, password, isNew = false) => {\n    const url = `${BASE_URL}/users` + (isNew ? \"/register\" : \"/login\");\n  \n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: makeHeaders(),\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n  \n    const { error, data } = await response.json();\n  \n    if (error) {\n      throw Error(error.message);\n    }\n  \n    if (data && data.token) {\n      setToken(data.token);\n    }\n  \n    return data;\n  };\n  \n  export const hitAPI = async (method, endpoint, bodyObj) => {\n    const payload = {\n      method: method,\n      headers: makeHeaders(),\n    };\n  \n    if (bodyObj) {\n      payload.body = JSON.stringify(bodyObj);\n    }\n  \n    const response = await fetch(`${BASE_URL}${endpoint}`, payload);\n  \n    const { error, data } = await response.json();\n  \n    if (error) {\n      throw Error(error.message);\n    }\n  \n    if (data && data.token) {\n      setToken(data.token);\n    }\n  \n    return data;\n  };\n","import React, { useState } from \"react\";\n\nimport { auth } from \"../api\";\n\nconst Auth = ({\n    setIsLoggedIn,\n    isLoggedIn\n}) => {\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n\n\n  return (\n    <form className='login-form'\n          onSubmit={(event) => event.preventDefault()}>\n      <h3>Register or Log In</h3>\n      {errorMessage ? <h5 className=\"error\">{errorMessage}</h5> : null}\n      <input\n        type=\"text\"\n        value={username}\n        onChange={(event) => setUsername(event.target.value)}\n        placeholder=\"username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(event) => setPassword(event.target.value)}\n        placeholder=\"password\"\n      />\n      <button\n        onClick={async () => {\n          try {\n            await auth(username, password, true);\n            setIsLoggedIn(true);\n          } catch (error) {\n            setErrorMessage(error.message);\n          }\n        }}\n      >\n        Register\n      </button>\n      <button\n        onClick={async () => {\n          try {\n            await auth(username, password);\n            setIsLoggedIn(true);\n          } catch (error) {\n            setErrorMessage(error.message);\n          }\n        }}>Log In</button>\n    </form>\n  );\n};\n\nexport default Auth;","import React from 'react';\n\nimport {Auth} from \"../components\";\n\nimport {clearToken} from \"../api\";\n\nconst Header = ({\n  isLoggedIn,\n  setIsLoggedIn,\n  setPostList,\n  setUserPostsOnly,\n  postList}) => {\n  return <div id='header'>\n    {isLoggedIn ? (\n      <>\n      <h1>Welcome to Stranger's Things!</h1>\n      <button\n        onClick={() => {\n        clearToken();\n        setIsLoggedIn(false);\n        setUserPostsOnly(false);\n      }}>LOG OUT</button>\n      </>\n    ) : (\n      <>\n      <h1>Stranger's Things</h1>\n      <Auth\n        setIsLoggedIn={setIsLoggedIn}\n        postList={postList}\n        setPostList={setPostList}\n        isLoggedIn={isLoggedIn} />\n      </>\n    )}\n  </div>\n}\n\nexport default Header;","import React, { useState, useEffect } from \"react\";\n\nimport { hitAPI } from \"../api\";\n\nconst PostForm = (props) => {\n    \n  const { addNewPost, _id, setEditablePost, updatePost } = props;\n    \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [willDeliver, setWillDeliver] = useState(false);\n\n  const [isDirty, setIsDirty] = useState(false);\n\n  function clearForm() {\n    setTitle('')\n    setDescription('')\n    setPrice('')\n    setLocation('')\n  }\n\n  useEffect(() => {\n    setTitle(props.title || '')\n    setDescription(props.description || '')\n    setPrice(props.price || '')\n    setLocation(props.location || '')\n  }, [_id])\n\n  return (\n    <form\n      className=\"post-form\"\n      onSubmit={async (event) => {\n        event.preventDefault();\n\n        if (title.length === 0) {\n          setIsDirty(true);\n          return;\n        }\n\n        const postData = {\n          post: {\n            title,\n            description,\n            price,\n            willDeliver,\n          },\n        };\n\n        if (location.length > 0) {\n          postData.post.location = location;\n        }\n\n        if (_id) {\n            try {\n            const result = await hitAPI(\"PATCH\", `/posts/${_id}`, postData);\n            updatePost(result.post);\n            setEditablePost({}); \n            } catch (error) {\n                console.error(error);\n          }\n          } else {\n              try {\n                    const newPost = await hitAPI(\"POST\", `/posts`, postData);\n                    addNewPost(newPost.post);\n              } catch (error) {\n                    console.error(error);\n              }\n          }\n          \n          clearForm();\n      }}\n    >\n      <h3>Build Post</h3>\n      <input\n        type=\"text\"\n        placeholder=\"title for your post\"\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n      />\n      {isDirty && title.length === 0 ? (\n        <h3 style={{ color: \"red\" }}>You need a title</h3>\n      ) : null}\n      <textarea\n        type=\"text\"\n        placeholder=\"description\"\n        rows=\"10\"\n        columns=\"80\"\n        value={description}\n        onChange={(event) => setDescription(event.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"price\"\n        value={price}\n        onChange={(event) => setPrice(event.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"location\"\n        value={location}\n        onChange={(event) => setLocation(event.target.value)}\n      />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={willDeliver}\n          onChange={() => setWillDeliver(!willDeliver)}\n        />\n        I will deliver this\n      </label>\n      <button>POST</button>\n    </form>\n  );\n};\n\nexport default PostForm;","import React, { useState } from 'react';\nimport { hitAPI } from '../api';\n\nconst MessageForm = ({\n    handleClick\n}) => {\n    const [content, setContent] = useState('')\n    \n    return <form onSubmit={(event) => event.preventDefault()}>\n                         <input\n                            type=\"text\"\n                            value={content}\n                            onChange={(event) => {\n                                setContent(event.target.value)\n                            }}\n                            placeholder=\"Message to Author\"\n                                                    />\n                          <button onClick={() => {\n                              handleClick(content)\n                              setContent(\"\");\n                            }}>Post Message</button>\n                         </form>\n}\nconst MessageView = ({\n    messageList\n}) => {\n    const [commentView, setCommentView] = useState(false);\n\n    return <><button onClick={() => {\n        setCommentView(!commentView);\n    }}>Messages</button>\n\n    {\n    commentView  ?\n    messageList.map((message, idx) => {\n    return <div style={{\n        border: \"2px solid tan\",\n        margin: \"2px\"\n    }}  >\n         <p key={idx}>From: {message.fromUser.username}</p>\n           <p>{message.content}</p> \n           </div>\n    }) : null\n    }\n    </>  \n    \n}\n\nconst PostView = ({\n    postList,\n    setPostList,\n    setEditablePost,\n    isLoggedIn,\n    userPostsOnly\n}) => {\n    return  <div className='list'>\n        <h1>{userPostsOnly ? \"User Posts\" : \"All Posts\"}</h1>\n        {postList.map((post) => {\n                            return (\n                            <div\n                                className=\"post\"\n                                key={post._id}\n                                style={{\n                                border: post.isAuthor ? \"5px solid olive\" : \"3px solid orange\",\n                                }}\n                            >\n                                <h5>\n                                {post.title} ({post.location}) \n                                </h5>\n                                <p><strong>Price: {post.price}</strong></p>\n                                <p>{post.description}</p>\n                                <p> Will deliver: {post.willDeliver ? 'Yes' : 'No'}</p>\n\n                                {(isLoggedIn) ?\n                                    ((post.isAuthor) ?\n                                    <div className='user-options'>\n                                    <button onClick={async () => {\n                                        try {\n                                            const data = await hitAPI(\"DELETE\", `/posts/${post._id}`);\n                                            setPostList(data.posts);\n                                        } catch(error) {\n                                            console.log(error)\n                                        }\n                                    }}>Delete</button>\n\n                                    <button onClick={() => {\n                                        setEditablePost(post)\n                                    }}>Edit</button>\n                                    <MessageView messageList={ post.messages } />\n                                    </div>\n                                    : <div className='user-options'>\n                                        <MessageForm \n                                                     handleClick={async (content) => {\n                                                        const payload = {\n                                                            message: {\n                                                                content: content\n                                                            }\n                                                        } \n                                                        try {\n                                                            hitAPI(\"POST\", `/posts/${post._id}/messages`, payload) \n                                                        } catch (error) {\n                                                            console.error(error);\n                                                        }\n                                                       \n                                                     }}/>\n                                    </div>) : null\n                                }\n                            </div>\n                            );\n                        })}\n    </div>\n}\n\nexport default PostView","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom'\n\nimport { \n    Header,\n    PostForm,\n    PostView,\n } from './components';\n\n import { getToken, hitAPI } from \"./api\";\n\nconst App = () => {\n\n    const [isLoggedIn, setIsLoggedIn] = useState(!!getToken());\n    const [postList, setPostList] = useState([]);\n    const [searchResults, setSearchResults] = useState('');    \n    const [searchTerm, setSearchTerm] = useState('');\n    const [editablePost, setEditablePost] = useState({})\n    const [userPostsOnly, setUserPostsOnly] = useState(false);\n\n    function addNewPost(newPost) {\n        setPostList([...postList, newPost])\n    }\n\n    function updatePost(updatedPost) {\n        let index = postList.findIndex((post) => {\n            return post._id === updatedPost._id\n        })\n        if (index > -1) {\n      let postListCopy = [...postList];\n      postListCopy[index] = updatedPost;\n      setPostList(postListCopy);\n      }\n    }\n    // this function filters global postList by user entered keywords\n    // also takes into consideration whether user wants to see only their own posts or all posts\n    // Though it feels a little verbose, it works for me. If you have a better method, by all means feel free to do as you please.\n    function filteredPosts() {\n      if (userPostsOnly) {\n        return postList.filter((post) => {\n          return post.isAuthor && post.title.toLowerCase().includes(searchTerm.toLowerCase());\n        });\n      } else {\n        return postList.filter((post) => {\n          return post.title.toLowerCase().includes(searchTerm.toLowerCase());\n        });\n      };\n    }\n    const GetUserMessages = () => {\n        return postList.map(post => {\n            return post.isAuthor ? <div\n                       className=\"post\"\n                       key={post._id}\n                       style={{\n                          border: \"5px solid olive\",\n                                }}\n                    >\n                       <h5>For: {post.title}</h5>\n                       { \n                           post.messages.map((message, idx) => {\n                            return <div style={{\n                               border: \"2px solid tan\",\n                               margin: \"2px\"\n                           }}  >\n                                <p key={idx}>From: {message.fromUser.username}</p>\n                                  <p>{message.content}</p> \n                                  </div>\n                           })\n                       } \n            </div> : null\n        })\n    }\n\n  useEffect(async () => {\n    hitAPI(\"GET\", \"/posts\")\n      .then((data) => {\n        const { posts } = data;\n        setPostList(posts);\n      })\n      .catch(console.error);\n  }, [isLoggedIn, postList]);\n\n\n  return (\n    <>\n    <Header\n      isLoggedIn={isLoggedIn}\n      setIsLoggedIn={setIsLoggedIn}\n      setPostList={setPostList}\n      postList={filteredPosts()}\n      setUserPostsOnly={setUserPostsOnly} />\n    <div id=\"search\" >\n      <label htmlFor=\"keywords\">Search For a Post</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"Enter Post Title\" \n        value={ searchTerm } \n        onChange={(event) => {\n          setSearchTerm(event.target.value);\n        }} />\n      {isLoggedIn ? ( // if logged in, a button displays allowing user to toggle between user posts and all posts\n        userPostsOnly ? (\n        <button onClick={() => {\n          setUserPostsOnly(!userPostsOnly)}}>Show all posts</button>\n        ) : (\n        <button onClick={() => {\n          setUserPostsOnly(!userPostsOnly)}}>Show only user posts</button>)) : null}\n    </div> \n    <div className=\"logged-in-view\">\n    <PostView setSearchResults={setSearchResults}\n                    postList={filteredPosts()}\n                    setEditablePost={setEditablePost}\n                    setPostList={setPostList}\n                    isLoggedIn={isLoggedIn}\n                    userPostsOnly={userPostsOnly}\n                                />\n        <div>{\n            userPostsOnly ? <> \n                <h1>User Messages</h1>\n                <GetUserMessages />\n                </>\n            : null\n        }</div>\n        {isLoggedIn ?\n        <PostForm addNewPost={ addNewPost }\n                  {...editablePost}\n                  setEditablePost={setEditablePost}\n                  updatePost={updatePost} /> : null\n      }\n        \n    </div>\n    </>\n  );\n};\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('app')\n)"],"sourceRoot":""}